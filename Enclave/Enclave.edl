/*
 * Copyright (C) 2011-2021 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* Enclave.edl - Top EDL file. */

enclave {
    from "sgx_tstdc.edl" import *;
    from "sgx_tswitchless.edl" import *;
    include "../Shared/shared_sgx.h"

    trusted {        
        public VIP_ENCBOOL ecall_isDistinct([in, count=size]VIP_ENCINT* elements, size_t size);  
        public VIP_ENCBOOL ecall_isDistinct_leaky([in, count=size]VIP_ENCINT* elements, size_t size);  
        public VIP_ENCBOOL ecall_isValid([in, count=size]char* elements, size_t size); 
        public VIP_ENCBOOL ecall_add([in, count=size]int *x,size_t size,int all,int expected); 
        public VIP_ENCBOOL ecall_checkFreqecny([in, count=size]int *s,size_t size,int number,int efreq);     
        public VIP_ENCBOOL ecall_maxrun([in, count=size]int *array, size_t size,int expected);               
	    public VIP_ENCBOOL ecall_contains([in, count=size]int *array, size_t size,int expected);
        public VIP_ENCBOOL  ecall_set_intersect([in, count=sizeA]int* setA, [in, count=sizeB]int* setB, size_t sizeA, size_t sizeB);
    };

    untrusted {
        void ocall_print_string([in, count=length]const char *str,size_t length );
        void ocall_print_int(int num);
    };
};
